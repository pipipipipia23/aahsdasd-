-- Thay Ä‘á»•i URL webhook cá»§a báº¡n á»Ÿ Ä‘Ã¢y
local WEBHOOK_URL = "https://discord.com/api/webhooks/1421258453099216991/8BvwZ-uawO9HfDJHFX82_iMxmiSFq3uMaDLyIPO4Edo7ROgVRGso5kTPQPzMKGRID4y9"

local targetPlayer = "zxczxcdswrwerewrwerwerr"

repeat task.wait(0.5) until game:IsLoaded()

-- Services cache
local Services = setmetatable({}, {
    __index = function(_, Name)
        return cloneref(game:GetService(Name))
    end,
})

local coreGui = Services.CoreGui
local workspace = Services.Workspace
local playerService = Services.Players
local replicatedStorage = Services.ReplicatedStorage
local runService = Services.RunService
local virtualUser = Services.VirtualUser
local VirtualInputManager = Services.VirtualInputManager
local HttpService = Services.HttpService
local plr = playerService.LocalPlayer

-- Function Ä‘á»ƒ gá»­i webhook
local function sendWebhook(message, mentionEveryone)
    local data = {
        content = mentionEveryone and "@everyone " .. message or message,
        username = "Box Notifier"
    }
    
    local success, response = pcall(function()
        return request({
            Url = WEBHOOK_URL,
            Headers = {
                ["content-type"] = "application/json"
            },
            Method = "POST",
            Body = HttpService:JSONEncode(data),
        })
    end)
    
    if not success then
        warn("Failed to send webhook: " .. tostring(response))
    end
end

-- Webhook flags Ä‘á»ƒ trÃ¡nh spam
local webhookFlags = {}
local currentNotifications = {}
local currentBoxes = {} -- Track all boxes with priority

-- Fullscreen notification system
local screenGui = nil
local notificationFrame = nil

local function createNotificationScreen()
    if screenGui then return end
    
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BoxNotificationGui"
    screenGui.Parent = coreGui
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Parent = screenGui
    notificationFrame.Size = UDim2.new(1, 0, 1, 0)
    notificationFrame.Position = UDim2.new(0, 0, 0, 0)
    notificationFrame.BackgroundTransparency = 0.3
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Visible = false
    
    -- Text label for notification
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "NotificationText"
    textLabel.Parent = notificationFrame
    textLabel.Size = UDim2.new(0.8, 0, 0.3, 0)
    textLabel.Position = UDim2.new(0.1, 0, 0.35, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = ""
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    
    -- Click to dismiss
    local clickButton = Instance.new("TextButton")
    clickButton.Name = "ClickToDismiss"
    clickButton.Parent = notificationFrame
    clickButton.Size = UDim2.new(1, 0, 1, 0)
    clickButton.Position = UDim2.new(0, 0, 0, 0)
    clickButton.BackgroundTransparency = 1
    clickButton.Text = ""
    
    clickButton.MouseButton1Click:Connect(function()
        notificationFrame.Visible = false
    end)
end

local function getBoxPriority(itemName)
    if string.find(itemName, "Ultra Rare") then
        return 3 -- Highest priority
    elseif string.find(itemName, "Rare") then
        return 2 -- Medium priority
    else
        return 1 -- Lowest priority (Common)
    end
end

local function updateNotificationDisplay()
    if not next(currentBoxes) then
        if notificationFrame then
            notificationFrame.Visible = false
        end
        return
    end
    
    -- Find highest priority box to display
    local highestPriority = 0
    local displayBox = nil
    local boxCount = {ultraRare = 0, rare = 0, common = 0}
    
    for boxName, _ in pairs(currentBoxes) do
        local priority = getBoxPriority(boxName)
        if priority > highestPriority then
            highestPriority = priority
            displayBox = boxName
        end
        
        -- Count boxes by type
        if priority == 3 then
            boxCount.ultraRare = boxCount.ultraRare + 1
        elseif priority == 2 then
            boxCount.rare = boxCount.rare + 1
        else
            boxCount.common = boxCount.common + 1
        end
    end
    
    if displayBox then
        createNotificationScreen()
        
        -- Create summary text
        local summaryText = ""
        if boxCount.ultraRare > 0 then
            summaryText = summaryText .. "ğŸ”¥ Ultra Rare: " .. boxCount.ultraRare .. " "
        end
        if boxCount.rare > 0 then
            summaryText = summaryText .. "âœ¨ Rare: " .. boxCount.rare .. " "
        end
        if boxCount.common > 0 then
            summaryText = summaryText .. "ğŸ“¦ Common: " .. boxCount.common .. " "
        end
        
        if highestPriority == 3 then -- Ultra Rare
            notificationFrame.BackgroundColor3 = Color3.new(1, 0, 0) -- Red
            notificationFrame.NotificationText.Text = "ğŸ”¥ ULTRA RARE BOX! ğŸ”¥\n" .. displayBox .. "\n\n" .. summaryText
        elseif highestPriority == 2 then -- Rare
            notificationFrame.BackgroundColor3 = Color3.new(0, 1, 0) -- Green
            notificationFrame.NotificationText.Text = "âœ¨ RARE BOX! âœ¨\n" .. displayBox .. "\n\n" .. summaryText
        else -- Common
            notificationFrame.BackgroundColor3 = Color3.new(1, 1, 1) -- White
            notificationFrame.NotificationText.Text = "ğŸ“¦ COMMON BOX ğŸ“¦\n" .. displayBox .. "\n\n" .. summaryText
        end
        
        -- Only show if window is not focused
        if not game:GetService("UserInputService").WindowFocused then
            notificationFrame.Visible = true
        end
    end
end

game:GetService("UserInputService").WindowFocused:Connect(function()
    -- Hide when focused
    if notificationFrame then
        notificationFrame.Visible = false
    end
end)

game:GetService("UserInputService").WindowFocusReleased:Connect(function()
    -- Update display when window loses focus
    updateNotificationDisplay()
end)

-- Continuous inventory scanning
local function scanInventory()
    local inventory = plr.Backpack:GetChildren()
    local newCurrentBoxes = {}
    
    -- Scan current inventory
    for _, item in pairs(inventory) do
        if string.find(item.Name, "Box") then
            newCurrentBoxes[item.Name] = true
            
            -- Check if this box hasn't been notified yet
            if not webhookFlags[item.Name] then
                webhookFlags[item.Name] = true
                
                local itemName = item.Name
                local isUltraRare = string.find(itemName, "Ultra Rare")
                local isRare = string.find(itemName, "Rare") and not isUltraRare
                
                if isUltraRare then
                    sendWebhook("ğŸ”¥ **ULTRA RARE!** " .. itemName .. " Ä‘Ã£ Ä‘Æ°á»£c tÃ¬m tháº¥y! - " .. plr.Name, true)
                elseif isRare then
                    sendWebhook("âœ¨ **RARE!** " .. itemName .. " Ä‘Ã£ Ä‘Æ°á»£c tÃ¬m tháº¥y! - " .. plr.Name, true)
                else
                    sendWebhook("ğŸ“¦ **" .. itemName .. "** Ä‘Ã£ Ä‘Æ°á»£c tÃ¬m tháº¥y!", false)
                end
            end
        end
    end
    
    -- Update current boxes
    currentBoxes = newCurrentBoxes
    
    -- Reset flags for boxes that are no longer in inventory
    for boxName, _ in pairs(webhookFlags) do
        if not currentBoxes[boxName] then
            webhookFlags[boxName] = nil
            currentNotifications[boxName] = nil
            print("Reset flag for: " .. boxName)
        end
    end
    
    -- Update notification display based on current boxes
    updateNotificationDisplay()
end

-- Start continuous scanning
task.spawn(function()
    while true do
        pcall(scanInventory)
        task.wait(1) -- Scan every 1 second
    end
end)

plr.Idled:Connect(function()
    virtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(0.25)
    virtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)


if plr.Name == targetPlayer then
    print("Warning: The target player is different from the local player.")
    return
end

plr.Idled:Connect(function()
    virtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(0.25)
    virtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

function tpdeobisao(a,bl)
    if bl == nil then
        bl = false 
    end
    local plr = game.Players.LocalPlayer
    local creat32etween
    local CULO312RD
    local calltween = {}
    local cac
    if a == nil then
        cac = CFrame.new(0, 0, 0)
    else
        cac = a
    end
    local pos = (cac.Position - plr.Character.HumanoidRootPart.Position).Magnitude
    local TweenService = game:GetService("TweenService")
    if plr.Character.Humanoid.Health > 0 then
        CULO312RD = TweenInfo.new(
            pos / 450,
            Enum.EasingStyle.Linear
        )
        creat32etween = TweenService:Create(plr.Character.HumanoidRootPart, CULO312RD, { CFrame = cac })
        creat32etween:Play()
        if bl then
            creat32etween.Completed:Wait()
        end
    else
        creat32etween = nil
    end
    function calltween:Stop()
        if creat32etween then
            creat32etween:Cancel()
        end
    end
    return calltween
end

while true do wait(5)
    pcall(function()
        if plr.PlayerGui.Load.Frame.Visible == true and workspace.UserData["User_" .. plr.UserId].Data.CompassTokens.Value > 0 then
            task.wait(3)
            getconnections(plr.PlayerGui.Load.Frame.Load.MouseButton1Click)[1].Function()
            task.wait(5)
        end
        if workspace.UserData["User_" .. plr.UserId].Data.CompassTokens.Value > 0 then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Claim_Sam = ReplicatedStorage.Connections.Claim_Sam
            Claim_Sam:FireServer(
                "Claim1"
            )
            task.wait(5)
        end
        if plr.Backpack:FindFirstChild("Compass") then
            if game.Players:FindFirstChild(targetPlayer) then
                tpdeobisao(game.Players[targetPlayer].Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 8), true)
                task.wait(.5)
                plr.Character.Humanoid:EquipTool(plr.Backpack:FindFirstChild("Compass"))
                task.wait(.5)
                VirtualInputManager:SendKeyEvent(true, 8, false, game)
                task.wait(0.1)
                VirtualInputManager:SendKeyEvent(false, 8, false, game)
                task.wait(1)
                tpdeobisao(game.Players[targetPlayer].Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 50))
                task.wait(1)
                plr:Kick("Finished!")
                task.wait(.5)
                table.clear(getreg())
            else
                print("Target player not found!")
                task.wait(5)
            end
        end
    end)
end

--- table.clear(getreg())
