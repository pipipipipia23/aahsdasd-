getgenv().config = { -- dont change it (have smart config combo auto)
    combo_auto_igris = {
        "Vogita Super",
        "Sprintwagon",
        "Alligator",
        "Sosuke (Hebi)"
    },
    combomacro = { -- luu y next map 3 = 
        Act1 = "https://raw.githubusercontent.com/pipipipipia23/aahsdasd-/refs/heads/main/Act1",
        NextMap1 = "https://raw.githubusercontent.com/pipipipipia23/aahsdasd-/refs/heads/main/NextMap1",
        NextMap2 = "https://raw.githubusercontent.com/pipipipipia23/aahsdasd-/refs/heads/main/NextMap2",
        NextMap3 = "https://raw.githubusercontent.com/pipipipipia23/aahsdasd-/refs/heads/main/NextMap3",
    }
}

function loadscript()
    getgenv().config = { -- dont change it (have smart config combo auto)
    combo_auto_igris = {
        "Vogita Super",
        "Sprintwagon",
        "Alligator",
        "Sosuke (Hebi)"
    }
}

getgenv().recmacro = false
repeat wait() until game:IsLoaded()
local plr = cloneref(game.Players.LocalPlayer)
local StartPlayer = cloneref(game:GetService("StarterPlayer"))
local Storage = cloneref(game:GetService("ReplicatedStorage"))
local YenEvent = cloneref(Storage.Networking.ClientListeners.YenEvent)
local HttpService = cloneref(game:GetService("HttpService"))
local VirtualInputManager = cloneref(game:GetService("VirtualInputManager"))
local Workspace = cloneref(workspace)
local TeleportRef = cloneref(game:GetService("TeleportService"))
local clonestep2_1 = cloneref(Storage.Modules.Gameplay.GameHandler)
local clonestep2_2 = cloneref(StartPlayer.Modules.Interface.Loader.HUD.Units)
local clonestep2_3 = cloneref(Storage.Modules.Data.Entities.EntityIDHandler.Units)
local GameHandler = require(clonestep2_1)
local UnitEquipedData = require(clonestep2_2)
local UnitsName = require(clonestep2_3)

print("Start rec macro")

local YEN = 0

YenEvent.OnClientEvent:Connect(function(v9)
    pcall(function()
        YEN = v9
    end)
end)

local macro = {}

local defaultindex = 0

function getpos(name)
    for i,v in pairs(Workspace.Units:GetChildren()) do
        if v.Name == name then
            return v.HumanoidRootPart.Position
        end
    end
    return "Dit me may lỗi rồi"
end

function postouid(pos)
    for i,v in pairs(Workspace.Units:GetChildren()) do
        if (v.HumanoidRootPart.Position - pos).Magnitude <= 2 then
            return v.Name
        end
    end
end

function remote(method, data)
    local Storage = cloneref(game:GetService("ReplicatedStorage"))
    local l_UnitEvent_0 = Storage.Networking.UnitEvent
    l_UnitEvent_0:FireServer(method, data)
end

function getmoney()
    local Currencies = plr:GetAttribute("Gems")
    return Currencies
end

function calcmoney(name)
    local path = "nil"
    for i,v in pairs(Storage.Modules.Data.Entities.UnitsData.Default:GetDescendants()) do
        if v.Name == name then
            path = v
        end
    end
    local refcl = cloneref(path)
    local vail = require(refcl)
    return vail.Price
end

local dataplace = {

}

local meomeo = {

}

function posfindunit(name)
    for i1,v1 in pairs(meomeo) do
        if (Workspace.Units[name].HumanoidRootPart.Position - v1[2]).Magnitude <= 1 then
            return v1[1]
        end
    end
end

function calcmoneyupdate(name)
    local path = "nil"
    local unitne = posfindunit(name)
    print(unitne)
    for i,v in pairs(Storage.Modules.Data.Entities.UnitsData.Default:GetDescendants()) do
        if v.Name == unitne then
            path = v
        end
    end
    local refcl = cloneref(path)
    local vail = require(refcl)
    for i,v in pairs(Workspace.Units:GetChildren()) do
        if v.Name == name then
            if not dataplace[v.Name] then
                dataplace[v.Name] = 1
            else
                dataplace[v.Name] = dataplace[v.Name] + 1
            end
            print(v.Name , dataplace[v.Name])
            return vail.Upgrades[dataplace[v.Name] + 1].Price
        end
    end
end

if getgenv().recmacro == true then
    Storage.Networking.UnitEvent.OnClientEvent:Connect(function(...)
        local args = {...}
        pcall(function()
            if args[1] == "Render" then
                print("one here")
                defaultindex = defaultindex + 1
                table.insert(meomeo,{args[2].Name, args[2].Position})
                table.insert(macro, {data = {Method = args[1] ,CFrame = tostring(args[2].Position), Money = calcmoney(args[2].Name), Id = args[2].Identifier, Name = args[2].Name , Index = args[2].Rotation}})
            end
            if args[1] == "Upgrade" then
                print("one here")
                defaultindex = defaultindex + 1
                table.insert(macro, {data = {Method = args[1] , Money = calcmoneyupdate(args[2]), CFrame = tostring(getpos(args[2]))}})
            end
            if args[1] == "Remove" then
                print("one here")
                defaultindex = defaultindex + 1
                table.insert(macro, {data = {Method = "Sell" , Money = calcmoneyupdate(args[2]), CFrame = tostring(getpos(args[2]))}})
            end
        end)
    end)
end

getgenv().loadmacro = {}

getgenv().timebanner = 0
function abc()
    wait(3)
    local gamedata = GameHandler.GameData

    if gamedata.PlayerCount > 1 then
        local ts = TeleportRef
        local p = plr
        ts:Teleport(16146832113, p)
    else
        print("Time banner")
        getgenv().timebanner = readfile("TimeBanner.txt")

        if gamedata.Act == "Act1" and gamedata.Stage == "Stage1" then
            local a,b = pcall(function()
                print("Act1")
                getgenv().loadmacro = HttpService:JSONDecode(readfile("Act1.txt"))
            end)
            if not a then
                game:Shutdown()
            end
        elseif gamedata.Stage == "Stage1" then
            local a,b = pcall(function()
                print("LastMap")
                getgenv().loadmacro = HttpService:JSONDecode(readfile("NextMap1.txt"))
            end)
            if not a then
                game:Shutdown()
            end
        elseif gamedata.Stage == "Stage3" then
            local a,b = pcall(function()
                print("LastMap")
                getgenv().loadmacro = HttpService:JSONDecode(readfile("NextMap3.txt"))
            end)
            if not a then
                game:Shutdown()
            end
        elseif gamedata.Stage == "Stage2" then
            local a,b = pcall(function()
                print("NextMap")
                getgenv().loadmacro = HttpService:JSONDecode(readfile("NextMap2.txt"))
            end)
            if not a then
                game:Shutdown()
            end
        end
    end
end

abc()

function stringtopos(positionString)
    local positionParts = string.split(positionString, ", ")
    local positionVector = Vector3.new(tonumber(positionParts[1]), tonumber(positionParts[2]), tonumber(positionParts[3]))    
    return positionVector
end

function click(a)
    VirtualInputManager:SendMouseButtonEvent(a.AbsolutePosition.X+a.AbsoluteSize.X/2,a.AbsolutePosition.Y+50,0,true,a,1)
    VirtualInputManager:SendMouseButtonEvent(a.AbsolutePosition.X+a.AbsoluteSize.X/2,a.AbsolutePosition.Y+50,0,false,a,1)
end

local index = 1
spawn(function() 
	while true do wait(1)
		local a,b = pcall(function()
            if getgenv().recmacro ~= true then
                if getgenv().loadmacro[index].data.Method == "Render" and YEN >= getgenv().loadmacro[index].data.Money then
                    print("IN HERE4?")
                    wait(3)
                    l_Name_2 = {
                        getgenv().loadmacro[index].data.Name, 
                        getgenv().loadmacro[index].data.Id, 
                        stringtopos(getgenv().loadmacro[index].data.CFrame), 
                        getgenv().loadmacro[index].data.Index
                    }                
                    remote("Render", l_Name_2)
                    index = index + 1
                end
                if getgenv().loadmacro[index].data.Method == "Upgrade" and YEN >= getgenv().loadmacro[index].data.Money then
                    print("IN HERE5?")
                    wait(3)
                    remote("Upgrade", postouid(stringtopos(getgenv().loadmacro[index].data.CFrame)))
                    index = index + 1
                end
            end
		end)
	end
end)
-- GameHandler
spawn(function()
    while true do wait(1.5)
        pcall(function()
            for i,v in pairs(plr.PlayerGui:GetChildren()) do
                if string.find(v.Name, "Tutorial") then
                    print("get connection")
                    getconnections(v.Holder.Main.Close.Button.Activated)[1]:Fire()
                    return
                end
            end
            if plr.PlayerGui:FindFirstChild("RewardsDisplay") then
                if plr.PlayerGui.RewardsDisplay.Enabled == true then
                    spawn(function() 
                        click(plr.PlayerGui.ViewFrames.ViewFrame)
                    end)
                    return
                end
            end
            if plr.PlayerGui:FindFirstChild("SkipWave") then
                print("get connection")
                getconnections(plr.PlayerGui.SkipWave.Holder.Yes.Button.Activated)[1]:Fire()
            end
            if plr.PlayerGui.EndScreen.Container.Visible == true and plr.PlayerGui.EndScreen.Enabled == true then
                if getmoney() >= 15000 and tick() > tonumber(getgenv().timebanner) then
                    spawn(function()
                        local ts = TeleportRef
                        local p = plr
                        ts:Teleport(16146832113, p)
                    end)
                    return
                end
                if getgenv().nextmap == true then
                    if plr.PlayerGui.EndScreen.Container.EndScreen.Main.FailedLabel.Visible == false then
                        spawn(function()
                            local ts = TeleportRef
                            local p = plr
                            ts:Teleport(16146832113, p)
                            return
                        end)
                    else
                        spawn(function()
                            print("get connection")
                            getconnections(plr.PlayerGui.EndScreen.Container.EndScreen.Retry.Button.Activated)[1]:Fire()
                            return
                        end)
                    end
                    return
                end
                spawn(function()
                    print("get connection")
                    getconnections(plr.PlayerGui.EndScreen.Container.EndScreen.Retry.Button.Activated)[1]:Fire()
                end)
                if not plr.PlayerGui:FindFirstChild("RewardsDisplay") then
                    index = 1
                end
            end
        end)
    end
end)

function findUnit(name)
    for i,v in pairs(UnitEquipedData._Cache) do
        if type(v) == "table" then
            if UnitsName[v.Identifier] == name then
                return true
            end
        end
        return false
    end
end

function jump()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, 32, false, game)
    wait(4)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, 32, false, game)
end

spawn(function()
    while true do wait()
        pcall(function()
            local tickm = tick()
            repeat wait()
            until tick() - tickm >= 30
            jump()
        end)
    end
end)

getgenv().nextmap = false

spawn(function() -- fixer loop
    while true do wait(5)
        pcall(function()
            if findUnit("Vogita Super") and findUnit("Sprintwagon") and findUnit("Alligator") then
                getgenv().nextmap = true
            else
                getgenv().nextmap = false
            end
        end)
    end
end)

spawn(function()
    while getgenv().recmacro == true do wait(1)
        writefile("dmm.txt", HttpService:JSONEncode(macro))
    end
end)
end

if game.PlaceId ~= 16146832113 then
    loadscript()
    return
end
repeat wait() until game:IsLoaded()
local plr = cloneref(game.Players.LocalPlayer)
local StartPlayer = cloneref(game:GetService("StarterPlayer"))
local Storage = cloneref(game:GetService("ReplicatedStorage"))
local Workspace = cloneref(workspace)
local UnitHandler = require(StartPlayer.Modules.Interface.Loader.Windows.UnitWindowHandler)
local InventoryHandler = require(StartPlayer.Modules.Interface.Loader.Windows.InventoryHandler)
local LobbyHandler = require(StartPlayer.Modules.Interface.Loader.Windows.Lobby.LobbyHandler)
local Entidies_Units = require(Storage.Modules.Data.Entities.Units)
local SettingHandler = require(StartPlayer.Modules.Gameplay.SettingsHandler)
local summonevent = Storage.Networking.Units.SummonIndexEvent
local Network = Storage.Networking
local Quest = Network.Quests
local QuestRes = Quest.RequestQuests
local Achievements = Quest.RequestAchievements

-- import macro
spawn(function()
    for i,v in pairs(getgenv().config.combomacro) do
        local xamlok = game:HttpGet(v, true)
        if xamlok == "HTTP Error Code: 404 Reason: Not Found" then
            return 
        end
        writefile(i.. ".txt", xamlok)
    end
end)
--
function getunit()
    local UnitHandler = require(StartPlayer.Modules.Interface.Loader.Windows.UnitWindowHandler)
    return UnitHandler._Cache
end

function hasHub()
    return plr.PlayerGui:FindFirstChild("HUD")
end

function firstselect_andsmt() -- choose units
    if game.PlaceId == 16146832113 then
        if hasHub() then
            local args = {
                [1] = "Interact",
                [2] = {
                    [1] = "StarterUnitDialogue",
                    [2] = 1,
                    [3] = "Okay!"
                }
            }
    
            Storage.Networking.State.DialogueEvent:FireServer(unpack(args))
            wait(1)
            local args = {
                [1] = "Interact",
                [2] = {
                    [1] = "StarterUnitDialogue",
                    [2] = 2,
                    [3] = "Yeah!"
                }
            }
    
            Storage.Networking.State.DialogueEvent:FireServer(unpack(args))
            wait(1)
            local args = {
                [1] = "Interact",
                [2] = {
                    [1] = "StarterUnitDialogue",
                    [2] = 2,
                    [3] = "Yeah!"
                }
            }
    
            Storage.Networking.State.DialogueEvent:FireServer(unpack(args))
            wait(1)
            local args = {
                [1] = "Select",
                [2] = "Roku"
            }
    
            Storage.Networking.Units.UnitSelectionEvent:FireServer(unpack(args))
            wait(1)
        end
        wait(1)
        local args = {
            [1] = "ClaimAll"
        }
    
        Storage.Networking.Units.CollectionEvent:FireServer(unpack(args))
        wait(1)
        local args = {
            [1] = "ClaimAll"
        }
    
        Storage.Networking.BattlepassEvent:FireServer(unpack(args))
    end
end

function redeemcode_etc() -- auto get code and redeem
    local html1 = game:HttpGet("https://www.eurogamer.net/roblox-anime-vanguards-codes", true)

    local function removeExpiredCodes(html)
        local working_codes_section = html:match("<h2 id=\"section%-1\">(.-)</ul>")
        return working_codes_section .. "</ul>"
    end

    local html = removeExpiredCodes(html1)

    local function extractCodes(html)
        local codes = {}

        for code, reward, new_tag in html:gmatch("<li>%s*<strong>(.-)</strong>%s*:%s*(.-)%s*<strong><em>(NEW)</em></strong>?") do
            table.insert(codes, {code = code, reward = reward, is_new = "NEW"})
        end

        for code, reward in html:gmatch("<li>%s*<strong>(.-)</strong>%s*:%s*(.-)</li>") do
            if not reward:find("NEW") then
                table.insert(codes, {code = code, reward = reward, is_new = ""})
            end
        end

        for _, entry in ipairs(codes) do
            local new_status = entry.is_new ~= "" and " (NEW)" or ""
            -- print("Code: " .. entry.code .. ", Reward: " .. entry.reward .. new_status)
        end
        return codes
    end

    for i,v in pairs(extractCodes(html)) do
        local args = {
            [1] = v.code
        }
        Storage.Networking.CodesEvent:FireServer(unpack(args))
        wait(.5)
    end

    QuestRes:FireServer()
    local v20, v21 = QuestRes.OnClientEvent:Wait()
    for i,v in pairs(v21) do
        if v.Completed == true and v.Claimed == false then
            local args = {
                [1] = i
            }

            Storage.Networking.Quests.ClaimQuest:FireServer(unpack(args))
            wait(.5)
        end
    end
    Achievements:FireServer()
    local v239, v240, v241, v242 = Achievements.OnClientEvent:Wait()
    if v239 then
        for i,v in pairs(v240) do
            if v.Claimed == false then
                local args = {
                    [1] = i
                }
                
                Storage.Networking.Quests.ClaimQuest:FireServer(unpack(args))                
            end
        end
    end
end

function hasequip(id)
    local UnitHandler = require(StartPlayer.Modules.Interface.Loader.Windows.UnitWindowHandler)
    for i,v in pairs(UnitHandler.EquippedUnits) do
        if i == id then
            return true
        end
    end
    return false
end

function equipunit(id)
    repeat wait(1)
        local args = {
            [1] = "Equip",
            [2] = id
        }
        
        Storage.Networking.Units.EquipEvent:FireServer(unpack(args))
        wait(2)
    until hasequip(id) == true
end

function getmoney()
    local Currencies = plr:GetAttribute("Gems")
    return Currencies
end

function getlevel()
    local Currencies = plr:GetAttribute("Level")
    return Currencies
end

function gettimebanner()
    local Currencies = Workspace:GetAttribute("SummonTimer")
    return Currencies
end

function autosummon()
    if haveinlist("Sprintwagon") and haveinlist("Alligator") then
        turnonsetting("Epic")
    end
    if getmoney() > 500 then
        local args = {
            [1] = "SummonTen",
            [2] = "Special"
        }
        
        Storage.Networking.Units.SummonEvent:FireServer(unpack(args))
        return true
    end
    return false
end

pcall(redeemcode_etc)
pcall(firstselect_andsmt)

-- custom setting
function turnonsetting(string)
    if not SettingHandler:GetSetting(string) then
        local args = {
            [1] = "Toggle",
            [2] = string
        }
        
        Storage.Networking.Settings.SettingsEvent:FireServer(unpack(args))
    end
end

pcall(function()
    for i = 5, getlevel() , 5 do
        local args = {
            [1] = "Claim",
            [2] = i
        }
        
        Storage.Networking.Milestones.MilestonesEvent:FireServer(unpack(args))
    end
end)

function haveinlist(nameunit)
    local unitdata = getunit()
    for i,v in pairs(unitdata) do
        if unitdata[i].UnitData.Name == nameunit then
            return true
        end
    end
    return false
end

pcall(function()
    turnonsetting("SkipSummonAnimation")
    turnonsetting("LowDetailMode")   
    turnonsetting("DisableVisualEffects")
    turnonsetting("DisableDamageIndicators")
    turnonsetting("DisableEnemyTags")
    turnonsetting("DisableGlobalMessages")
    turnonsetting("Rare")
    turnonsetting("Legendary")
    if haveinlist("Sprintwagon") and haveinlist("Alligator") then
        turnonsetting("Epic")
    end
end)

getgenv().unitinbanner = nil

summonevent.OnClientEvent:Connect(function(v56, v57)
    if v56 == "ReplicateRates" then
        local viaz = 0
        for i,v in pairs(v57.Mythic) do
            if viaz < v57.Mythic[i].Chance then
                viaz = v57.Mythic[i].Chance
                getgenv().unitinbanner = v57.Mythic[i].Name
            end
        end
    end
end)

function gethigher()
    if getgenv().unitinbanner == nil then
        summonevent:FireServer()
    end
end

if game.PlaceId == 16146832113 then
    local args = {
        [1] = "UnequipAll"
    }
    
    Storage.Networking.Units.EquipEvent:FireServer(unpack(args))
end

local gradeScale = {
    ["D"] = 1,
    ["D+"] = 1.5,
    ["C"] = 2,
    ["C+"] = 2.5,
    ["B"] = 3,
    ["B+"] = 3.5,
    ["A"] = 4,
    ["A+"] = 4.5,
    ["S"] = 5,
    ["S+"] = 5.5,
    ["Z"] = 6,
    ["Z+"] = 7 -- Điểm cao nhất
}

function getbestunit(nameunit)
    local unitdata = getunit()
    local listunit = false
    local score = 0
    for i,v in pairs(unitdata) do
        if unitdata[i].UnitData.Name == nameunit then
            local scoremain = unitdata[i].Statistics.Damage.Percentage + unitdata[i].Statistics.Range.Percentage + unitdata[i].Statistics.SPA.Percentage + unitdata[i].Level
            if score < scoremain then
                score = scoremain
                listunit = {i,v}
            end
        end
    end
    if listunit == false then return end
    if type(unitdata[listunit[1]].Trait) ~= "table" then
        local args = {
            [1] = "Reroll",
            [2] = {
                [1] = listunit[1],
                [2] = "Trait"
            }
        }
        
        Storage.Networking.Units.TraitEvent:FireServer(unpack(args))
    end

    if unitdata[listunit[1]].Takedowns > 5000 then
        print(tostring(unitdata[listunit[1]].Statistics.SPA.Tier))
        print(gradeScale[tostring(unitdata[listunit[1]].Statistics.SPA.Tier)])
        if gradeScale[tostring(unitdata[listunit[1]].Statistics.Damage.Tier)] < 4 or gradeScale[tostring(unitdata[listunit[1]].Statistics.Range.Tier)] < 4 or gradeScale[tostring(unitdata[listunit[1]].Statistics.SPA.Tier)] < 4 then
            local args = {
                [1] = "All",
                [2] = listunit[1]
            }
            
            Storage.Networking.StatRerollFunction:InvokeServer(unpack(args))       
        end       
    end

    return listunit
end

function findandfeed(id)
    local l_v9_Inventory_1 = InventoryHandler:GetInventory()
    local vailondata = {}
    for v129, v130 in l_v9_Inventory_1 do
        if v130.Data.ItemGroup == "UnitFood" then
            table.insert(vailondata, {v130.Data.Name, v130.Amount})
        end
    end
    local args = {
        [1] = "Feed",
        [2] = {
            [1] = id,
            [2] = vailondata
        }
    }
    Storage.Networking.Units.FeedEvent:FireServer(unpack(args))
end
-- find and change another legen
pcall(function()
    local unitdata = getunit()
    if haveinlist(getgenv().config.combo_auto_igris[4]) == false then
        for i,v in pairs(unitdata) do
            if v.UnitData.Rarity == "Mythic" and v.UnitData.MaxPlacements >= 3 and v.UnitData.Name ~= "Vogita Super" then
                getgenv().config.combo_auto_igris[4] = v.UnitData.Name
            end
        end
    end
end)
-- auto
local plr = game.Players.LocalPlayer
function checkplayerin(pos)
	local res = false
    for i,v in pairs(game.Players:GetChildren()) do
		if v.Character then
			if v.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= plr.Name  then
				if (v.Character.HumanoidRootPart.Position - pos.Position).Magnitude <= 5 then
					res = true
				end
			end
		end
    end
    return res
end

-- calc map

function getnextstage()
    local a = "Stage1"
    for i,v in pairs(LobbyHandler.PlayerData.Stages.Story) do
        a = i
    end
    return a
end

function getnextmap()
    local a = "Act1"
    local num = 1
    local nextstage = getnextstage()
    for i,v in pairs(LobbyHandler.PlayerData.Stages.Story[nextstage]) do
        local actNumber = i:gsub("Act", "")
        if tonumber(actNumber) > num and i ~= "Infinite" then
            a = i
        end
    end
    if nextstage == "Stage3" and a == "Act6" then
        return false
    else
        return a
    end
end

function legenstage()
    local a = "Stage1"
    for i,v in pairs(LobbyHandler.PlayerData.Stages.LegendStage) do
        a = i
    end
    return a
end

function getnextmaplegend()
    local a = "Act1"
    local num = 1
    local nextstage = legenstage()
    for i,v in pairs(LobbyHandler.PlayerData.Stages.LegendStage[nextstage]) do
        local actNumber = i:gsub("Act", "")
        if tonumber(actNumber) > num and i ~= "Infinite" then
            a = i
        end
    end
    if nextstage == "Stage3" and a == "Act6" then
        return false
    else
        return a
    end
end

function joinstage(stage, act)
    for i,v in pairs(Workspace.MainLobby.Lobby.Stories:GetChildren()) do
        if checkplayerin(v.Teleport) == false then
            local args = {
                [1] = "Enter",
                [2] = v
            }
            
            print(Storage.Networking.LobbyEvent:FireServer(unpack(args)))
            wait(.2)
            local args = {
                [1] = "Confirm",
                [2] = {
                    [1] = "Story",
                    [2] = stage,
                    [3] = act,
                    [4] = "Normal",
                    [5] = 4,
                    [6] = 0,
                    [7] = true
                }
            }
            
            Storage.Networking.LobbyEvent:FireServer(unpack(args))
            wait(.2)
            local args = {
                [1] = "Start"
            }
            
            Storage.Networking.LobbyEvent:FireServer(unpack(args))        
        end
    end
end

spawn(function()
    writefile("TimeBanner.txt", tostring(gettimebanner() + tick()))
end)

function main()
    if getmoney() > 500 and getgenv().nomorebanner ~= true then
        print("Unit : ", getgenv().unitinbanner)
        if getgenv().unitinbanner == nil then
            gethigher()
            return
        end

        for i,v in pairs(getgenv().config.combo_auto_igris) do
            if getgenv().unitinbanner == v and not haveinlist(v) then
                autosummon()
                return
            end
        end
        getgenv().nomorebanner = true
    else
        -- if getlevel() > 30 then
            for i,v in pairs(getgenv().config.combo_auto_igris) do
                local getbest = getbestunit(v)
                if getbest ~= nil then
                    equipunit(getbest[1])
                    if getbest[2].Level < 50 and v ~= "Sprintwagon" then
                        if (v == "Alligator" and getbest[2].Level < 30) or v ~= "Alligator" then
                            findandfeed(getbest[1])
                            getgenv().notfulllvl = true
                        end
                    end
                else
                    getgenv().ditmevailon = true
                    equipunit(getbestunit("Roku")[1])
                end
                wait(2)
            end
            if getgenv().ditmevailon == true or getgenv().notfulllvl == true then
                joinstage("Stage1", "Act1")
                getgenv().stop = true
            else
                if getnextmap() == false then
                    joinstage(getnextstage(), getnextmap())
                else
                    joinstage(legenstage(), getnextmap())
                end
            end
        -- else
        --     print("chay thoi")
        --     wait(1)
        --     equipunit(getbestunit("Roku")[1])
        --     wait(1)
        --     joinstage("Stage1", "Act1")
        --     getgenv().stop = true
        --end
    end
end

spawn(function() 
    while getgenv().stop ~= true do wait()
        local a,b = pcall(main)
        print(a,b)
    end
end)


-- if game.PlaceId == 16146832113 then
--     return
-- end
